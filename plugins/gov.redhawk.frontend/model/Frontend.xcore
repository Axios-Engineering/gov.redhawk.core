@Ecore(nsURI="http://redhawk.gov/frontend/1.0.0")
@GenModel(prefix="Frontend", dataTypeConverters="true", binaryCompantibleReflectiveMethods="true", fileExtensions="xml", colorProviders="true", fontProviders="true", tablesProviders="true", resource="XML", templateDirectory="/gov.redhawk.frontend/templates", forceOverwrite="true", modelPluginVariables="org.eclipse.xtext.xbase.lib", tableProviders="true")
@GenModel(contentTypeIdentifier="http://redhawk.gov/frontend/1.0.0")
@GenModel(editDirectory="/gov.redhawk.frontend.edit/src-gen")
package gov.redhawk.frontend

import gov.redhawk.model.sca.ScaStructProperty
import gov.redhawk.model.sca.ScaDevice
import gov.redhawk.model.sca.ScaSimpleProperty


type ScaDevice wraps ScaDevice < ? >
type TunerStatusStruct wraps ScaStructProperty
type ScaSimpleProperty wraps ScaSimpleProperty

class ModelDevice {
	contains TunerContainer tunerContainer opposite modelDevice
	ScaDevice scaDevice
}

class TunerContainer {
	container ModelDevice modelDevice opposite tunerContainer
	contains TunerStatus[] tunerStatus opposite tunerContainer
}

class TunerStatus { 
	container TunerContainer tunerContainer opposite tunerStatus

	TunerStatusStruct tunerStatusStruct // Direct reference to device struct
	ScaSimpleProperty[] simples
	String tunerID	// Model specific property, used for virtual ordering and assignment

	// Required Status Elements
	String tunerType
	String allocationID		
	double centerFrequency 	
	double bandwidth 		
	double sampleRate		
	String groupID			
	String rfFlowID
	boolean enabled			

	// Optional Status Elements
	double gain		
	boolean agc		
	long referenceSource	

	// Tuner Allocation Properties
	boolean deviceControl
	contains ListenerAllocation[] listenerAllocations opposite tunerStatus
}

class ListenerAllocation {
	container TunerStatus tunerStatus opposite listenerAllocations
	String listenerID
}
