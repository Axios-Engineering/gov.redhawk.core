package gov.redhawk.ExtendedCF;


/**
* gov/redhawk/ExtendedCF/SandboxPOATie.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/efe/redhawk/git/gov.redhawk.core/plugins/gov.redhawk.sandbox/idl/ossie/CF/sandbox.idl
* Monday, May 20, 2013 5:01:28 PM EDT
*/


/**
         * Interface to the Sandbox
         */
public class SandboxPOATie extends SandboxPOA
{

  // Constructors

  public SandboxPOATie ( gov.redhawk.ExtendedCF.SandboxOperations delegate ) {
      this._impl = delegate;
  }
  public SandboxPOATie ( gov.redhawk.ExtendedCF.SandboxOperations delegate , org.omg.PortableServer.POA poa ) {
      this._impl = delegate;
      this._poa      = poa;
  }
  public gov.redhawk.ExtendedCF.SandboxOperations _delegate() {
      return this._impl;
  }
  public void _delegate (gov.redhawk.ExtendedCF.SandboxOperations delegate ) {
      this._impl = delegate;
  }
  public org.omg.PortableServer.POA _default_POA() {
      if(_poa != null) {
          return _poa;
      }
      else {
          return super._default_POA();
      }
  }

  /**
               * Resolves to a NamingContext that elements should be bound to in order to appear in this container
               */
  public org.omg.CosNaming.NamingContext namingContext ()
  {
    return _impl.namingContext();
  } // namingContext


  /**
               * Resolves to a CF::DeviceManager that CF::Device elements should register with to appear in the container
               */
  public CF.DeviceManager deviceManager ()
  {
    return _impl.deviceManager();
  } // deviceManager


  /**
               * Current SCA profiles (as defined in appendix D) that are available
               */
  public String[] availableProfiles ()
  {
    return _impl.availableProfiles();
  } // availableProfiles


  /**
               * File Manager for the Sandbox
               */
  public CF.FileManager fileManager ()
  {
    return _impl.fileManager();
  } // fileManager


  /**
               * Resources currently registered with the system.
               */
  public gov.redhawk.ExtendedCF.ResourceDesc[] registeredResources ()
  {
    return _impl.registeredResources();
  } // registeredResources


  /**
               * Get the resource factory of the given type
               * @param identifier an profile id as found in availableProfiles
               */
  public CF.ResourceFactory getResourceFactory (String identifier)
  {
    return _impl.getResourceFactory(identifier);
  } // getResourceFactory


  /**
               * Get the resource factory of the given profile
               * @param identifier an profile id as found in availableProfiles
               */
  public CF.ResourceFactory getResourceFactoryByProfile (String profile)
  {
    return _impl.getResourceFactoryByProfile(profile);
  } // getResourceFactoryByProfile


  /**
               * Tell the sandbox to refresh the state of the object
               * @param obj The object to refresh
               * @param dpth The depth to which to refresh this object
               */
  public void refresh (org.omg.CORBA.Object obj, gov.redhawk.ExtendedCF.SandboxPackage.Depth dpth)
  {
    _impl.refresh(obj, dpth);
  } // refresh

  private gov.redhawk.ExtendedCF.SandboxOperations _impl;
  private org.omg.PortableServer.POA _poa;

} // class SandboxPOATie
