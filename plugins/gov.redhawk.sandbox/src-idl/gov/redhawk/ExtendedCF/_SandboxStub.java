package gov.redhawk.ExtendedCF;


/**
* gov/redhawk/ExtendedCF/_SandboxStub.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/efe/redhawk/git/gov.redhawk.core/plugins/gov.redhawk.sandbox/idl/ossie/CF/sandbox.idl
* Monday, May 20, 2013 5:01:28 PM EDT
*/


/**
         * Interface to the Sandbox
         */
public class _SandboxStub extends org.omg.CORBA.portable.ObjectImpl implements gov.redhawk.ExtendedCF.Sandbox
{


  /**
               * Resolves to a NamingContext that elements should be bound to in order to appear in this container
               */
  public org.omg.CosNaming.NamingContext namingContext ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_namingContext", true);
                $in = _invoke ($out);
                org.omg.CosNaming.NamingContext $result = org.omg.CosNaming.NamingContextHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return namingContext (        );
            } finally {
                _releaseReply ($in);
            }
  } // namingContext


  /**
               * Resolves to a CF::DeviceManager that CF::Device elements should register with to appear in the container
               */
  public CF.DeviceManager deviceManager ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_deviceManager", true);
                $in = _invoke ($out);
                CF.DeviceManager $result = CF.DeviceManagerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return deviceManager (        );
            } finally {
                _releaseReply ($in);
            }
  } // deviceManager


  /**
               * Current SCA profiles (as defined in appendix D) that are available
               */
  public String[] availableProfiles ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_availableProfiles", true);
                $in = _invoke ($out);
                String $result[] = gov.redhawk.ExtendedCF.SandboxPackage.ProfileDescSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return availableProfiles (        );
            } finally {
                _releaseReply ($in);
            }
  } // availableProfiles


  /**
               * File Manager for the Sandbox
               */
  public CF.FileManager fileManager ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_fileManager", true);
                $in = _invoke ($out);
                CF.FileManager $result = CF.FileManagerHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return fileManager (        );
            } finally {
                _releaseReply ($in);
            }
  } // fileManager


  /**
               * Resources currently registered with the system.
               */
  public gov.redhawk.ExtendedCF.ResourceDesc[] registeredResources ()
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("_get_registeredResources", true);
                $in = _invoke ($out);
                gov.redhawk.ExtendedCF.ResourceDesc $result[] = gov.redhawk.ExtendedCF.SandboxPackage.ResourceDescSequenceHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return registeredResources (        );
            } finally {
                _releaseReply ($in);
            }
  } // registeredResources


  /**
               * Get the resource factory of the given type
               * @param identifier an profile id as found in availableProfiles
               */
  public CF.ResourceFactory getResourceFactory (String identifier)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getResourceFactory", true);
                $out.write_string (identifier);
                $in = _invoke ($out);
                CF.ResourceFactory $result = CF.ResourceFactoryHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getResourceFactory (identifier        );
            } finally {
                _releaseReply ($in);
            }
  } // getResourceFactory


  /**
               * Get the resource factory of the given profile
               * @param identifier an profile id as found in availableProfiles
               */
  public CF.ResourceFactory getResourceFactoryByProfile (String profile)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("getResourceFactoryByProfile", true);
                $out.write_string (profile);
                $in = _invoke ($out);
                CF.ResourceFactory $result = CF.ResourceFactoryHelper.read ($in);
                return $result;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                return getResourceFactoryByProfile (profile        );
            } finally {
                _releaseReply ($in);
            }
  } // getResourceFactoryByProfile


  /**
               * Tell the sandbox to refresh the state of the object
               * @param obj The object to refresh
               * @param dpth The depth to which to refresh this object
               */
  public void refresh (org.omg.CORBA.Object obj, gov.redhawk.ExtendedCF.SandboxPackage.Depth dpth)
  {
            org.omg.CORBA.portable.InputStream $in = null;
            try {
                org.omg.CORBA.portable.OutputStream $out = _request ("refresh", true);
                org.omg.CORBA.ObjectHelper.write ($out, obj);
                gov.redhawk.ExtendedCF.SandboxPackage.DepthHelper.write ($out, dpth);
                $in = _invoke ($out);
                return;
            } catch (org.omg.CORBA.portable.ApplicationException $ex) {
                $in = $ex.getInputStream ();
                String _id = $ex.getId ();
                throw new org.omg.CORBA.MARSHAL (_id);
            } catch (org.omg.CORBA.portable.RemarshalException $rm) {
                refresh (obj, dpth        );
            } finally {
                _releaseReply ($in);
            }
  } // refresh

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:redhawk.gov/ExtendedCF/Sandbox:1.0"};

  public String[] _ids ()
  {
    return (String[])__ids.clone ();
  }

  private void readObject (java.io.ObjectInputStream s) throws java.io.IOException
  {
     String str = s.readUTF ();
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     org.omg.CORBA.Object obj = orb.string_to_object (str);
     org.omg.CORBA.portable.Delegate delegate = ((org.omg.CORBA.portable.ObjectImpl) obj)._get_delegate ();
     _set_delegate (delegate);
   } finally {
     orb.destroy() ;
   }
  }

  private void writeObject (java.io.ObjectOutputStream s) throws java.io.IOException
  {
     String[] args = null;
     java.util.Properties props = null;
     org.omg.CORBA.ORB orb = org.omg.CORBA.ORB.init (args, props);
   try {
     String str = orb.object_to_string (this);
     s.writeUTF (str);
   } finally {
     orb.destroy() ;
   }
  }
} // class _SandboxStub
