package gov.redhawk.ExtendedCF;


/**
* gov/redhawk/ExtendedCF/SandboxPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from /home/efe/redhawk/git/gov.redhawk.core/plugins/gov.redhawk.sandbox/idl/ossie/CF/sandbox.idl
* Monday, May 20, 2013 5:01:28 PM EDT
*/


/**
         * Interface to the Sandbox
         */
public abstract class SandboxPOA extends org.omg.PortableServer.Servant
 implements gov.redhawk.ExtendedCF.SandboxOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("_get_namingContext", new java.lang.Integer (0));
    _methods.put ("_get_deviceManager", new java.lang.Integer (1));
    _methods.put ("_get_availableProfiles", new java.lang.Integer (2));
    _methods.put ("_get_fileManager", new java.lang.Integer (3));
    _methods.put ("_get_registeredResources", new java.lang.Integer (4));
    _methods.put ("getResourceFactory", new java.lang.Integer (5));
    _methods.put ("getResourceFactoryByProfile", new java.lang.Integer (6));
    _methods.put ("refresh", new java.lang.Integer (7));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {

  /**
               * Resolves to a NamingContext that elements should be bound to in order to appear in this container
               */
       case 0:  // ExtendedCF/Sandbox/_get_namingContext
       {
         org.omg.CosNaming.NamingContext $result = null;
         $result = this.namingContext ();
         out = $rh.createReply();
         org.omg.CosNaming.NamingContextHelper.write (out, $result);
         break;
       }


  /**
               * Resolves to a CF::DeviceManager that CF::Device elements should register with to appear in the container
               */
       case 1:  // ExtendedCF/Sandbox/_get_deviceManager
       {
         CF.DeviceManager $result = null;
         $result = this.deviceManager ();
         out = $rh.createReply();
         CF.DeviceManagerHelper.write (out, $result);
         break;
       }


  /**
               * Current SCA profiles (as defined in appendix D) that are available
               */
       case 2:  // ExtendedCF/Sandbox/_get_availableProfiles
       {
         String $result[] = null;
         $result = this.availableProfiles ();
         out = $rh.createReply();
         gov.redhawk.ExtendedCF.SandboxPackage.ProfileDescSequenceHelper.write (out, $result);
         break;
       }


  /**
               * File Manager for the Sandbox
               */
       case 3:  // ExtendedCF/Sandbox/_get_fileManager
       {
         CF.FileManager $result = null;
         $result = this.fileManager ();
         out = $rh.createReply();
         CF.FileManagerHelper.write (out, $result);
         break;
       }


  /**
               * Resources currently registered with the system.
               */
       case 4:  // ExtendedCF/Sandbox/_get_registeredResources
       {
         gov.redhawk.ExtendedCF.ResourceDesc $result[] = null;
         $result = this.registeredResources ();
         out = $rh.createReply();
         gov.redhawk.ExtendedCF.SandboxPackage.ResourceDescSequenceHelper.write (out, $result);
         break;
       }


  /**
               * Get the resource factory of the given type
               * @param identifier an profile id as found in availableProfiles
               */
       case 5:  // ExtendedCF/Sandbox/getResourceFactory
       {
         String identifier = in.read_string ();
         CF.ResourceFactory $result = null;
         $result = this.getResourceFactory (identifier);
         out = $rh.createReply();
         CF.ResourceFactoryHelper.write (out, $result);
         break;
       }


  /**
               * Get the resource factory of the given profile
               * @param identifier an profile id as found in availableProfiles
               */
       case 6:  // ExtendedCF/Sandbox/getResourceFactoryByProfile
       {
         String profile = in.read_string ();
         CF.ResourceFactory $result = null;
         $result = this.getResourceFactoryByProfile (profile);
         out = $rh.createReply();
         CF.ResourceFactoryHelper.write (out, $result);
         break;
       }


  /**
               * Tell the sandbox to refresh the state of the object
               * @param obj The object to refresh
               * @param dpth The depth to which to refresh this object
               */
       case 7:  // ExtendedCF/Sandbox/refresh
       {
         org.omg.CORBA.Object obj = org.omg.CORBA.ObjectHelper.read (in);
         gov.redhawk.ExtendedCF.SandboxPackage.Depth dpth = gov.redhawk.ExtendedCF.SandboxPackage.DepthHelper.read (in);
         this.refresh (obj, dpth);
         out = $rh.createReply();
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:redhawk.gov/ExtendedCF/Sandbox:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public Sandbox _this() 
  {
    return SandboxHelper.narrow(
    super._this_object());
  }

  public Sandbox _this(org.omg.CORBA.ORB orb) 
  {
    return SandboxHelper.narrow(
    super._this_object(orb));
  }


} // class SandboxPOA
