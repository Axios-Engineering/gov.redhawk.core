/**
 * This file is protected by Copyright.
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 *
 * This file is part of REDHAWK IDE.
 *
 * All rights reserved.  This program and the accompanying materials are made available under
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html.
 */
package gov.redhawk.ui.port.nxmblocks;

import gov.redhawk.bulkio.util.AbstractUberBulkIOPort;
import gov.redhawk.bulkio.util.BulkIOType;
import gov.redhawk.model.sca.ScaUsesPort;
import gov.redhawk.sca.util.OrbSession;
import gov.redhawk.ui.port.nxmplot.AbstractNxmPlotWidget;
import gov.redhawk.ui.port.nxmplot.PlotActivator;

import java.text.MessageFormat;

import nxm.redhawk.prim.corbareceiver;

import org.eclipse.core.databinding.DataBindingContext;
import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.Status;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.swt.SWT;
import org.eclipse.swt.widgets.Composite;
import org.omg.CORBA.SystemException;
import org.omg.PortableServer.Servant;
import org.omg.PortableServer.POAPackage.ServantNotActive;
import org.omg.PortableServer.POAPackage.WrongPolicy;

import BULKIO.PrecisionUTCTime;
import BULKIO.StreamSRI;
import CF.Port;
import CF.PortHelper;
import CF.PortPackage.InvalidPort;
import CF.PortPackage.OccupiedPort;

/**
 * @noreference This class is provisional/beta and is subject to API changes
 * @since 4.3
 */
public class BulkIONxmBlock2 extends AbstractNxmBlock<corbareceiver, BulkIONxmBlockSettings> {

	private static OrbSession orbSession = OrbSession.createSession();
	private org.omg.CORBA.Object corbaObjRef;
	private String connectionId;
	private Port port;

	private BulkIONxmBlockSettings settings;

	private ScaUsesPort scaPort;
	private final BulkIOPort bulkIOPort = new BulkIOPort(); 
	private final String ior;
	private final BulkIOType bulkIOType; 

	class BulkIOPort extends AbstractUberBulkIOPort {

		@Override
		protected void handleStreamSRIChanged(String streamID, StreamSRI oldSri, StreamSRI newSri) {
			launch(streamID, null);
		}

		@Override
		public void pushPacket(short[] data, PrecisionUTCTime time, boolean eos, String streamID) {
			// ignore, not receiving data in this class
		}

		@Override
		public void pushPacket(char[] data, PrecisionUTCTime time, boolean eos, String streamID) {
			// ignore, not receiving data in this class
		}

		@Override
		public void pushPacket(double[] data, PrecisionUTCTime time, boolean eos, String streamID) {
			// ignore, not receiving data in this class
		}

		@Override
		public void pushPacket(float[] data, PrecisionUTCTime time, boolean eos, String streamID) {
			// ignore, not receiving data in this class
		}

		@Override
		public void pushPacket(long[] data, PrecisionUTCTime time, boolean eos, String streamID) {
			// ignore, not receiving data in this class
		}

		@Override
		public void pushPacket(int[] data, PrecisionUTCTime time, boolean eos, String streamID) {
			// ignore, not receiving data in this class
		}

		@Override
		public void pushPacket(byte[] data, PrecisionUTCTime time, boolean eos, String streamID) {
			// ignore, not receiving data in this class
		}

		public org.omg.CORBA.Object createCorbaObject() throws ServantNotActive, WrongPolicy, CoreException {
			return bulkIOType.createRef(orbSession.getPOA(), this);
		}

	} // end inner class BulkIOPort

	/** <b>INTERNAL USE ONLY</b>
	 * @noreference This constructor is not intended to be referenced by clients.
	 * @param settings
	 */
	public BulkIONxmBlock2(@NonNull AbstractNxmPlotWidget plotWidget, @NonNull ScaUsesPort scaUsesPort, @NonNull BulkIONxmBlockSettings settings) {
		super(corbareceiver.class, "BULKIO");
		// super(corbareceiver.class, "BULKIO", plotWidget);
		this.settings = settings;
		this.scaPort = scaUsesPort;
		this.ior = scaUsesPort.getIor();
		String idl = scaPort.getRepid();
		this.bulkIOType = BulkIOType.getType(idl);
	}

	@Override
	public boolean hasControls() {
		return true;
	}

	/* (non-Javadoc)
	 * @see gov.redhawk.ui.port.nxmplot.IInputSource#createControls(org.eclipse.swt.widgets.Composite)
	 */
	@Override
	public Composite createControls(Composite parent, BulkIONxmBlockSettings settings, DataBindingContext dataBindingContext) {
		return new BulkIONxmBlockControls(parent, SWT.NONE, settings, dataBindingContext);
	}

	/* (non-Javadoc)
	 * @see gov.redhawk.ui.port.nxmplot.INxmCmdSource#getSettings()
	 */
	@Override
	public BulkIONxmBlockSettings getSettings() {
		BulkIONxmBlockSettings clone = settings.clone();
		return clone;
	}

	/* (non-Javadoc)
	 * @see gov.redhawk.ui.port.nxmplot.INxmCmdSource#applySettings(java.lang.Object)
	 */
	@Override
	public void applySettings(BulkIONxmBlockSettings settings) {
		// TODO
	}

	@Override
	public void start() throws CoreException {
		//		BulkIOUtilActivator.getBulkIOPortConnectionManager().connect(ior, bulkIOType, bulkIOPort); // works

		port = PortHelper.narrow(orbSession.getOrb().string_to_object(ior));
		if (port == null) {
			throw new IllegalStateException("Failed to narrow to port.");
		}

		try {
///			corbaObjRef = bulkIOPort.createCorbaObject(); // deprecated API
			Servant servant = bulkIOType.createServant(bulkIOPort);
			corbaObjRef = orbSession.getPOA().servant_to_reference(servant);
			connectionId = System.getProperty("user.name", "user") + "_" + System.currentTimeMillis();

			System.out.println("DEBUG: bulkioNxmBlock2.connect() calling Port.connectPort(.)..."); // SUPPRESS CHECKSTYLE DEBUG
			port.connectPort(corbaObjRef, connectionId);
//			scaPort.connectPort(corbaObjRef, connectionId); // <--- why doesn't this work?
		} catch (ServantNotActive e) {
			throw new CoreException(new Status(Status.ERROR, PlotActivator.PLUGIN_ID, "Failed to register connection (1).", e));
		} catch (WrongPolicy e) {
			throw new CoreException(new Status(Status.ERROR, PlotActivator.PLUGIN_ID, "Failed to register connection (2).", e));
		} catch (InvalidPort e) {
			throw new CoreException(new Status(Status.ERROR, PlotActivator.PLUGIN_ID, "Failed to register connection (3).", e));
		} catch (OccupiedPort e) {
			throw new CoreException(new Status(Status.ERROR, PlotActivator.PLUGIN_ID, "Failed to register connection (4).", e));
		} catch (SystemException e) {
			throw new CoreException(new Status(Status.ERROR, PlotActivator.PLUGIN_ID, "Failed to register connection (5).", e));
		}

		System.out.println("DEBUG: bulkioNxmBlock2.start() done"); // SUPPRESS CHECKSTYLE DEBUG
	}

	@Override
	public void stop() {
		if (scaPort != null) {
			//	BulkIOUtilActivator.getBulkIOPortConnectionManager().disconnect(ior, bulkIOType, bulkIOPort); // works
			try {
				port.disconnectPort(connectionId);
				corbaObjRef._release();
//				scaPort.disconnectPort(connectionId); // 
				port = null;
			} catch (InvalidPort e) {
				// TODO Auto-generated catch block
				e.printStackTrace(); // SUPPRESS CHECKSTYLE DEBUG
			}
			scaPort = null;
		}
	}

	@Override
	public int getMaxInputs() {
		return 0; // BULKIO Port is starting point (so it has no inputs)
	}

	// =========================================================================
	@Override 
	protected String formCmdLine(@NonNull AbstractNxmPlotWidget plotWidget, String streamID) {

		String outputName = AbstractNxmPlotWidget.createUniqueName(true);
		putOutputNameMapping(0, streamID, outputName); // save output name mapping 

		int frameSize = settings.getFrameSize();
		if (frameSize <= 0) {
			frameSize = 1024; 
		}
		int pipeSize = settings.getPipeSize();
		if (pipeSize <= 0) {
			pipeSize = 262144; 
		}
		int timeLineLen = settings.getTimelineLength(); 
		final String idl = scaPort.getRepid();
		String pattern = "CORBARECEIVER/BG/TLL={0,number,#}/PS={1,number,#}/POLL=1.0 FILE={2} FRAMESIZE={3,number,#} PORT_NAME={4} IDL=\"{5}\"";
		String cmdLine = MessageFormat.format(pattern, timeLineLen, pipeSize, outputName, frameSize, ior, idl);

		return cmdLine;
	}

}
