/** 
 * This file is protected by Copyright. 
 * Please refer to the COPYRIGHT file distributed with this source distribution.
 * 
 * This file is part of REDHAWK IDE.
 * 
 * All rights reserved.  This program and the accompanying materials are made available under 
 * the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html.
 *
 */

 // BEGIN GENERATED CODE
package gov.redhawk.eclipsecorba.idl.provider;

import gov.redhawk.eclipsecorba.idl.util.IdlAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class IdlItemProviderAdapterFactory extends IdlAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {

	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;
	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();
	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public IdlItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.Specification} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SpecificationItemProvider specificationItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.Specification}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSpecificationAdapter() {
		if (specificationItemProvider == null) {
			specificationItemProvider = new SpecificationItemProvider(this);
		}

		return specificationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.Declarator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclaratorItemProvider declaratorItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.Declarator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclaratorAdapter() {
		if (declaratorItemProvider == null) {
			declaratorItemProvider = new DeclaratorItemProvider(this);
		}

		return declaratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.ArrayDeclarator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayDeclaratorItemProvider arrayDeclaratorItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.ArrayDeclarator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayDeclaratorAdapter() {
		if (arrayDeclaratorItemProvider == null) {
			arrayDeclaratorItemProvider = new ArrayDeclaratorItemProvider(this);
		}

		return arrayDeclaratorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.Module} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModuleItemProvider moduleItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.Module}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModuleAdapter() {
		if (moduleItemProvider == null) {
			moduleItemProvider = new ModuleItemProvider(this);
		}

		return moduleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.IdlConstDcl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdlConstDclItemProvider idlConstDclItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.IdlConstDcl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdlConstDclAdapter() {
		if (idlConstDclItemProvider == null) {
			idlConstDclItemProvider = new IdlConstDclItemProvider(this);
		}

		return idlConstDclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.IdlException} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdlExceptionItemProvider idlExceptionItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.IdlException}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdlExceptionAdapter() {
		if (idlExceptionItemProvider == null) {
			idlExceptionItemProvider = new IdlExceptionItemProvider(this);
		}

		return idlExceptionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.Member} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemberItemProvider memberItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.Member}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemberAdapter() {
		if (memberItemProvider == null) {
			memberItemProvider = new MemberItemProvider(this);
		}

		return memberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.ForwardDcl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForwardDclItemProvider forwardDclItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.ForwardDcl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForwardDclAdapter() {
		if (forwardDclItemProvider == null) {
			forwardDclItemProvider = new ForwardDclItemProvider(this);
		}

		return forwardDclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.IdlInterfaceDcl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdlInterfaceDclItemProvider idlInterfaceDclItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.IdlInterfaceDcl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdlInterfaceDclAdapter() {
		if (idlInterfaceDclItemProvider == null) {
			idlInterfaceDclItemProvider = new IdlInterfaceDclItemProvider(this);
		}

		return idlInterfaceDclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.Commentable} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommentableItemProvider commentableItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.Commentable}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommentableAdapter() {
		if (commentableItemProvider == null) {
			commentableItemProvider = new CommentableItemProvider(this);
		}

		return commentableItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.ExportContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExportContainerItemProvider exportContainerItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.ExportContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExportContainerAdapter() {
		if (exportContainerItemProvider == null) {
			exportContainerItemProvider = new ExportContainerItemProvider(this);
		}

		return exportContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.BlockComment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlockCommentItemProvider blockCommentItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.BlockComment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlockCommentAdapter() {
		if (blockCommentItemProvider == null) {
			blockCommentItemProvider = new BlockCommentItemProvider(this);
		}

		return blockCommentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.LineComment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LineCommentItemProvider lineCommentItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.LineComment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLineCommentAdapter() {
		if (lineCommentItemProvider == null) {
			lineCommentItemProvider = new LineCommentItemProvider(this);
		}

		return lineCommentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.NativeTypeDcl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NativeTypeDclItemProvider nativeTypeDclItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.NativeTypeDcl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNativeTypeDclAdapter() {
		if (nativeTypeDclItemProvider == null) {
			nativeTypeDclItemProvider = new NativeTypeDclItemProvider(this);
		}

		return nativeTypeDclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.ValueType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueTypeItemProvider valueTypeItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.ValueType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueTypeAdapter() {
		if (valueTypeItemProvider == null) {
			valueTypeItemProvider = new ValueTypeItemProvider(this);
		}

		return valueTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.ValueTypeDcl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueTypeDclItemProvider valueTypeDclItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.ValueTypeDcl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueTypeDclAdapter() {
		if (valueTypeDclItemProvider == null) {
			valueTypeDclItemProvider = new ValueTypeDclItemProvider(this);
		}

		return valueTypeDclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.ValueForwardDcl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueForwardDclItemProvider valueForwardDclItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.ValueForwardDcl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueForwardDclAdapter() {
		if (valueForwardDclItemProvider == null) {
			valueForwardDclItemProvider = new ValueForwardDclItemProvider(this);
		}

		return valueForwardDclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.ValueDcl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueDclItemProvider valueDclItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.ValueDcl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueDclAdapter() {
		if (valueDclItemProvider == null) {
			valueDclItemProvider = new ValueDclItemProvider(this);
		}

		return valueDclItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link gov.redhawk.eclipsecorba.idl.ValueBoxDcl} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueBoxDclItemProvider valueBoxDclItemProvider;

	/**
	 * This creates an adapter for a {@link gov.redhawk.eclipsecorba.idl.ValueBoxDcl}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueBoxDclAdapter() {
		if (valueBoxDclItemProvider == null) {
			valueBoxDclItemProvider = new ValueBoxDclItemProvider(this);
		}

		return valueBoxDclItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (specificationItemProvider != null) specificationItemProvider.dispose();
		if (declaratorItemProvider != null) declaratorItemProvider.dispose();
		if (arrayDeclaratorItemProvider != null) arrayDeclaratorItemProvider.dispose();
		if (moduleItemProvider != null) moduleItemProvider.dispose();
		if (idlConstDclItemProvider != null) idlConstDclItemProvider.dispose();
		if (idlExceptionItemProvider != null) idlExceptionItemProvider.dispose();
		if (memberItemProvider != null) memberItemProvider.dispose();
		if (forwardDclItemProvider != null) forwardDclItemProvider.dispose();
		if (idlInterfaceDclItemProvider != null) idlInterfaceDclItemProvider.dispose();
		if (commentableItemProvider != null) commentableItemProvider.dispose();
		if (exportContainerItemProvider != null) exportContainerItemProvider.dispose();
		if (blockCommentItemProvider != null) blockCommentItemProvider.dispose();
		if (lineCommentItemProvider != null) lineCommentItemProvider.dispose();
		if (nativeTypeDclItemProvider != null) nativeTypeDclItemProvider.dispose();
		if (valueTypeItemProvider != null) valueTypeItemProvider.dispose();
		if (valueTypeDclItemProvider != null) valueTypeDclItemProvider.dispose();
		if (valueForwardDclItemProvider != null) valueForwardDclItemProvider.dispose();
		if (valueDclItemProvider != null) valueDclItemProvider.dispose();
		if (valueBoxDclItemProvider != null) valueBoxDclItemProvider.dispose();
	}

}
